targets:
  $default:
    builders:
      code_generation|topLevelNamesBuilder:
        generate_for:
          - lib/example/*.dart
        enabled: True
      code_generation|multiplierBuilder:
        generate_for:
          - lib/example/*.dart
        enabled: True
      code_generation|addBuilder:
        generate_for:
          - lib/example/*.dart
        enabled: True



builders:
  addBuilder:
    import: 'package:code_generation/code_generation.dart'
    builder_factories: [ 'addBuilder' ]
    build_extensions: { ".dart": [ ".add.dart" ] }
    auto_apply: dependents
    build_to: source


  # The next two builders are `SharedPartBuilder` instances.
  # Notice they each have
  # `build_extensions` set to a `NAME.g.part` file.
  #    NAME corresponds to the second argument to the SharedPartBuilder ctor.
  #    `.g.part` is the extension expected of SharedPartBuilder.
  # `build_to: cache` - the output is not put directly into the project
  # `applies_builders` - uses the `combining_builder` from `source_gen` to
  #   combine the parts from each builder into one part file.

  topLevelNamesBuilder:
    import: 'package:code_generation/code_generation.dart'
    builder_factories: [ 'topLevelNamesBuilder' ]
    build_extensions: {".dart": ["topLevelNames.g.part"]}
    auto_apply: dependents
    build_to: cache
    applies_builders: ["source_gen|combining_builder"]
  multiplierBuilder:
    import: 'package:code_generation/code_generation.dart'
    builder_factories: [ 'multiplierBuilder' ]
    build_extensions: {".dart": ["multiplier.g.part"]}
    auto_apply: dependents
    build_to: cache
    applies_builders: ["source_gen|combining_builder"]